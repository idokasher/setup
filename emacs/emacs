; colors
(set-background-color "black")
(set-foreground-color "white")

; windows switching
(defun other_window_backwards nil
 (interactive)
 (other-window -1))

(global-set-key [C-tab] 'other-window)
(global-set-key [C-S-iso-lefttab] 'other_window_backwards)

; coding (indent, etc.)
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . js-mode))
(add-to-list 'auto-mode-alist '("\\.ts\\'" . js-mode))
(add-to-list 'auto-mode-alist '("\\.h\\'" . c-mode))
(add-to-list 'auto-mode-alist '("\\.c\\'" . c-mode))
(setq c-default-style "linux"
      c-basic-offset 4
      indent-tabs-mode nil)
(setq-default c-basic-offset 4)

(add-hook 'c-mode-hook (lambda () (setq comment-start "//"
                                        comment-end   "")))
; (desktop-save-mode 1)
(put 'erase-buffer 'disabled nil)

(defun hide-ctrl-M ()
  "Hides the disturbing '^M' showing up in files containing mixed UNIX and DOS line endings."
  (interactive)
  (setq buffer-display-table (make-display-table))
  (aset buffer-display-table ?\^M []))

(setq inhibit-startup-screen t)
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(column-number-mode t))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; (set-face-attribute 'comint-highlight-prompt nil
;;                     :inherit nil)

;;; Shell mode
(setq ansi-color-names-vector ; better contrast colors
      ["black" "red4" "green4" "yellow4"
       "blue3" "magenta4" "cyan4" "white"])
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
